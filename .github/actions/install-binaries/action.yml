name: Install Binaries
description: Configures SSH, Shipyard, and installs `anchor` and `cargo-make`
inputs:
  ssh-private-key:
    description: "SSH private key"
    required: true
  private-repo-token:
    description: "Shipyard private repo token"
    required: true
  working-directory:
    description: "working directory"
    required: false
    default: "."
  with-sqlx:
    description: "Install sqlx"
    required: false
    default: "false"
  with-trunk:
    description: "Install trunk"
    required: false
    default: "false"
  with-anchor:
    description: "Install sa-anchor-cli"
    required: false
    default: "false"
  build:
    description: "Build the workspace"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Install dependencies
      shell: bash
      run: sudo apt install -y libsasl2-dev

    - name: Install Rust ðŸ¦€
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        rustflags: "-D warnings -A unexpected_cfgs"
        components: rustfmt,clippy

    - name: Configure SSH
      uses: kielabokkie/ssh-key-and-known-hosts-action@v1
      with:
        ssh-private-key: ${{ inputs.ssh-private-key }}
        ssh-host: ssh.shipyard.rs

    - name: Login to private crate repo
      run: cargo login --registry star-atlas ${{ inputs.private-repo-token }}
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    - name: Copy .cargo
      run: mkdir -p ~/.cargo && cp -r ./.cargo/ ~/.cargo
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    - uses: taiki-e/install-action@v2
      with:
        tool: cargo-make

    - uses: taiki-e/install-action@v2
      if: ${{ inputs.with-trunk == 'true' }}
      with:
        tool: trunk,wasm-bindgen-cli,wasm-opt

    - uses: taiki-e/install-action@v2
      if: ${{ inputs.with-sqlx == 'true' }}
      with:
        tool: sqlx-cli

    - name: Install anchor ðŸ“¦
      if: ${{ inputs.with-anchor == 'true' }}
      run: cargo install anchor-cli --registry star-atlas
      working-directory: ${{ inputs.working-directory }}
      shell: bash

    - name: Build workspace
      run: cargo build --release
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      if: ${{ inputs.build == 'true' }}
